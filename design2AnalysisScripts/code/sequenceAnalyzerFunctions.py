import pandas as pd
import numpy as np

def getAACount(seqList, AA, dict):
    AAcount = 0
    for seq in seqList:
        for pos in range(len(seq)):
            if AA == seq[pos]:
                AAcount+=1
    dict[AA].append(AAcount)

def getSeqProbability(AA, dict):
    AAcount = 0
    for pos in range(len(seq)):
        if AA == seq[pos]:
            AAcount+=1
    dict[AA].append(AAcount)

def getDfInterfaceCount(df, dfToAnalyze, writer):
    # Setup interface data dictionary
    dictInterface = {}
    dictInterface['Interface'] = []

    # TODO: add in a list of AAs used that gets autogenerated from the config file and put in here
    listAA = ["A", "F", "G", "I", "L", "S", "T", "V", "W", "Y"]
    addColumnsToDictionary(dictInterface, listAA)

    # Iterate through the interfaces and analyze the data for each unique interface
    for i, j in dfToAnalyze.iterrows():
        interface = j['Interface']
        tmpDf = df[df['Interface'] == interface]

        # append to dictionary
        dictInterface['Interface'].append(interface)

        # get list of interfaces and count each AA
        seqList = tmpDf["InterfaceSeq"]
        for AA in listAA:
            getAACount(seqList, AA, dictInterface)

        #writeDataframeToSpreadsheet(tmpDf, writer, interface)

    # Convert dictionary to dataframe
    outputDf = pd.DataFrame.from_dict(dictInterface)
    #total = outputDf.iloc[:, 1:].sum(axis=1)
    #tmpDf = outputDf.iloc[:, 1:].div(total, axis=0)
    interfaceColumn = outputDf["Interface"]
    writeDataframeToSpreadsheet(outputDf, writer, "InterfaceProbability")
    return outputDf, interfaceColumn

def getDfInterfaceProbability(df, dfToAnalyze, writer):
    # Setup interface data dictionary
    dictInterface = {}
    dictInterface['Interface'] = []

    # TODO: add in a list of AAs used that gets autogenerated from the config file and put in here
    listAA = ["A", "F", "G", "I", "L", "S", "T", "V", "W", "Y"]
    addColumnsToDictionary(dictInterface, listAA)

    # Iterate through the interfaces and analyze the data for each unique interface
    for i, j in dfToAnalyze.iterrows():
        interface = j['Interface']
        tmpDf = df[df['Interface'] == interface]

        # get list of interfaces
        seqList = tmpDf["InterfaceSeq"]
        for AA in listAA:
            getAACount(seqList, AA, dictInterface)

        # append to dictionary
        dictInterface['Interface'].append(interface)
        #writeDataframeToSpreadsheet(tmpDf, writer, interface)

    # Convert dictionary to dataframe
    outputDf = pd.DataFrame.from_dict(dictInterface)
    writeDataframeToSpreadsheet(outputDf, writer, "InterfaceAATotals")
    total = outputDf.iloc[:, 1:].sum(axis=1)
    tmpDf = outputDf.iloc[:, 1:].div(total, axis=0)
    dfInterfaceProb = tmpDf.copy()#I think these are references???
    interfaceColumn = outputDf["Interface"]
    #outputDf.insert(0, 'Interface', outputDf['Interface'])
    outputDf['Total'] = total
    writeDataframeToSpreadsheet(dfInterfaceProb, writer, "InterfaceProbability")
    #sheetName = 'InterfaceProbability'
    #writeDataframeToSpreadsheet(newDf, writer, sheetName)
    return dfInterfaceProb, interfaceColumn

def getDfMembraneProbability(dfInterfaceProb, dfMembraneSequenceProb, writer):
    dictMembraneProb = {}
    #dictMembraneProb['Interface'] = []

    # TODO: add in a list of AAs used that gets autogenerated from the config file and put in here
    listAA = ["A", "F", "G", "I", "L", "S", "T", "V", "W", "Y"]
    addColumnsToDictionary(dictMembraneProb, listAA)

    # Convert to dictionary
    # Transforms numpy.array() of values in each columns into dictionary (key = value column1, value = value column2)
    dictSeqProb = dict(dfMembraneSequenceProb.values)
    for i in range(len(dfInterfaceProb)):
        for AA in listAA:
            interfaceProb = dfInterfaceProb[AA][i]
            if interfaceProb != 0:
                membraneProb = dictSeqProb.get(AA)
                dictMembraneProb[AA].append(membraneProb)
            else:
                dictMembraneProb[AA].append(0)
    #sheetName = 'InterfaceProbability'
    #writeDataframeToSpreadsheet(newDf, writer, sheetName)
    #writer.save()
    #writer.close()

    dfMembraneProb = pd.DataFrame.from_dict(dictMembraneProb)
    total = dfMembraneProb.sum(axis=1)
    tmpDf = dfMembraneProb.div(total, axis=0)
    dfMembraneProb = tmpDf.copy()
    #tmpDf.insert(0, 'Interface', outputDf['Interface'])
    #dfMembraneProb.insert(0, 'Interface', dfInterfaceProb['Interface'])
    sheetName = 'MembraneSequenceProbability'
    writeDataframeToSpreadsheet(dfMembraneProb, writer, sheetName)

    return dfMembraneProb

#TODO: organize this code and think of a way to split these into bins...can I output things into output bin folders?
def interfaceSequenceCounts(df, dfSeqProb, colNames, outputDir, writer):
    # get unique interfaces from the dataframe
    dfInterface = df.groupby('Interface').head(1)

    sheetName = 'Interfaces'
    outFile = outputDir + 'SequenceInterfaceAnalysis.xlsx'
    interfaceWriter = pd.ExcelWriter(outFile)
    writeDataframeToSpreadsheet(dfInterface, interfaceWriter, sheetName)
    dfInterfaceCount, interfaceColumn = getDfInterfaceCount(df, dfInterface, interfaceWriter)
    #dfMembraneProb = getDfMembraneProbability(dfInterfaceProb, dfSeqProb, interfaceWriter)

    #dfSubtract = dfInterfaceProb-dfMembraneProb
    #dfDivide = dfSubtract.div(dfMembraneProb)*100
    dfInterfaceCount['Interface Number'] = dfInterfaceCount.reset_index().index
    #dfSubtract.insert(0, 'Interface', interfaceColumn)
    sheetName2 = 'Interface Count'
    writeDataframeToSpreadsheet(dfInterfaceCount, interfaceWriter, sheetName2)
#
    #total = dfDivide.sum(axis=1)
    #max_val = np.max(total)
    #total = total/max_val
#
    #sheetName3 = 'Divide by Membrane Probability'
    #dfDivide['Normalized Difference'] = total
    #writeDataframeToSpreadsheet(dfDivide, interfaceWriter, sheetName3)
    interfaceWriter.save()
    interfaceWriter.close()

def interfaceSequenceAnalyzer(df, dfSeqProb, colNames, outputDir, writer):
    # get unique interfaces from the dataframe
    dfInterface = df.groupby('Interface').head(1)

    sheetName = 'Interfaces'
    outFile = outputDir + 'SequenceInterfaceAnalysis.xlsx'
    interfaceWriter = pd.ExcelWriter(outFile)
    writeDataframeToSpreadsheet(dfInterface, interfaceWriter, sheetName)
    dfInterfaceProb, interfaceColumn = getDfInterfaceProbability(df, dfInterface, interfaceWriter)
    dfMembraneProb = getDfMembraneProbability(dfInterfaceProb, dfSeqProb, interfaceWriter)

    dfSubtract = dfInterfaceProb-dfMembraneProb
    dfDivide = dfSubtract.div(dfMembraneProb)*100
    dfSubtract['Interface Number'] = dfSubtract.reset_index().index
    dfSubtract.insert(0, 'Interface', interfaceColumn)
    sheetName2 = 'Interface-Membrane'
    writeDataframeToSpreadsheet(dfSubtract, interfaceWriter, sheetName2)

    total = dfDivide.sum(axis=1)
    max_val = np.max(total)
    total = total/max_val

    sheetName3 = 'Divide by Membrane Probability'
    dfDivide['Normalized Difference'] = total
    writeDataframeToSpreadsheet(dfDivide, interfaceWriter, sheetName3)
    interfaceWriter.save()
    interfaceWriter.close()

def analyzeSequencesWithSameInterface(df, columnsToAnalyze, writer):
    convertInterfaceToX(df)
    removeInterfaceEnds(df)
    interfaceAnalyzer(df, columnsToAnalyze, writer)

def interfaceAnalyzer(df, colNames, outputDir, writer):
    # Setup interface data dictionary
    interfaceDict = {}
    interfaceDict['Interface'] = []
    interfaceDict['Total'] = []
    interfaceDict['Number of Sequences'] = []
    interfaceDict['Number of Geometries'] = []
    interfaceDict['Highest Energy'] = []
    interfaceDict['Lowest Energy'] = []
    interfaceDict['Energy Range'] = []
    interfaceDict['xShift Range'] = []
    interfaceDict['CrossingAngle Range'] = []
    interfaceDict['axialRotation Range'] = []
    interfaceDict['zShift Range'] = []
    #interfaceDict['angleDistDensity Range'] = []
    addColumnsToDictionary(interfaceDict, colNames)

    # get unique interfaces from the dataframe
    interfaceDf = df.groupby('Interface').head(1)

    # Iterate through the interfaces and analyze the data for each unique interface
    for i, j in interfaceDf.iterrows():
        interface = j['Interface']
        tmpDf = df[df['Interface'] == interface]
        #makeSeqLogo(tmpDf, interface)
        getColumnAverages(tmpDf, colNames, interfaceDict)

        interfaceDict['Interface'].append(interface)
        interfaceDict['Number of Sequences'].append(len(tmpDf))
        interfaceDict['Number of Geometries'].append(tmpDf['crossingAngle'].nunique())
        interfaceDict['Highest Energy'].append(tmpDf['Total'].max())
        interfaceDict['Lowest Energy'].append(tmpDf['Total'].min())
        interfaceDict['Energy Range'].append(tmpDf['Total'].min()-tmpDf['Total'].max())
        interfaceDict['xShift Range'].append(tmpDf['xShift'].max()-tmpDf['xShift'].min())
        interfaceDict['CrossingAngle Range'].append(tmpDf['crossingAngle'].max()-tmpDf['crossingAngle'].min())
        interfaceDict['axialRotation Range'].append(tmpDf['axialRotation'].max()-tmpDf['axialRotation'].min())
        interfaceDict['zShift Range'].append(tmpDf['zShift'].max()-tmpDf['zShift'].min())
        #interfaceDict['angleDistDensity Range'].append(tmpDf['angleDistDensity'].max()-tmpDf['angleDistDensity'].min())

    # Convert dictionary to dataframe
    outputDf = pd.DataFrame.from_dict(interfaceDict)
    sheetName = "Interface Summary"
    outFile = outputDir + 'SequenceInterfaceAnalysisSummary.xlsx'
    newWriter = pd.ExcelWriter(outFile)
    writeDataframeToSpreadsheet(outputDf, newWriter, sheetName)
    newWriter.save()
    newWriter.close()

def addColumnsToDictionary(dict, colNames):
        for i in colNames:
            dict[i] = []

# Outputs a dictionary of means for a list of columns
def getColumnAverages(df, columnNames, dict):
    # Iterate through columns and collect means of data
    for i in range(len(columnNames)):
        currColumn = columnNames[i]
        dict[currColumn].append(df[currColumn].mean())

def writeDataframeToSpreadsheet(df, writer, sheetName):
    df.to_excel(writer, sheet_name=sheetName)

def convertInterfaceToX(df):
    interfaces = []
    for i, j in df.iterrows():
        interface = ""
        for AA in j["InterfaceSeq"][4:18]:
            if AA != "-":
                interface+="x"
            else:
                interface+="-"
        interfaces.append(interface)
    df["Interface"]=interfaces
    dataRow = df.iloc[0]
